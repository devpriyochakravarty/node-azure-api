name: Node.js CI, Build, and Push to ACR

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-and-publish-image:
    runs-on: ubuntu-latest
    
    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
        env:
          JWT_SECRET: a-very-secret-key-for-ci
          NODE_ENV: test
      
      - name: Azure Login
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          # enable-AzPSSession: true # Not strictly needed for docker login but good for PS scripts
          # The following is often helpful to ensure Docker gets Azure context
          # It ensures that the token acquired can be used by Docker login
          enable-AzPSSession: false # Set to false if not using PowerShell specific scripts after
          # The key might be that the azure/login itself configures docker if ACR is in the same tenant.
          # Let's ensure service principal has AcrPull/AcrPush on the ACR. (You did this with AcrPush).

      # The azure/docker-login action is designed to work after azure/login.
      # It should automatically use the logged-in Azure identity to get an ACR token.
      - name: Log in to Azure Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: azure/docker-login@v2 # Use v2 as it's the latest
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          # NO username, password, or creds here. It should use the ambient Azure CLI session
          # established by the previous azure/login@v1 step.

      - name: Build and tag Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/node-azure-api:${{ github.sha }} -t ${{ secrets.ACR_LOGIN_SERVER }}/node-azure-api:latest .
          echo "Image tagged with SHA: ${{ secrets.ACR_LOGIN_SERVER }}/node-azure-api:${{ github.sha }}"
          echo "Image tagged with latest: ${{ secrets.ACR_LOGIN_SERVER }}/node-azure-api:latest"
      
      - name: Push Docker image to ACR
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/node-azure-api:${{ github.sha }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/node-azure-api:latest